// DO NOT EDIT: generated by generator/generate.jsonnet
local astschema = import './schema.libsonnet',
      withToStringFunction() = {
  toString():: astschema.objectToString(self),
};
{
  '#': {
    filename: 'main.libsonnet',
    help: 'Jsonnet library to generate jsonnet code.\n## Install\n\n```\njb install github.com/crdsonnet/astsonnet@main\n```\n\n## Usage\n\n```jsonnet\nlocal ASTsonnet = import "github.com/crdsonnet/astsonnet/main.libsonnet"\n```\n',
    'import': 'github.com/crdsonnet/astsonnet/main.libsonnet',
    installTemplate: '\n## Install\n\n```\njb install %(url)s@%(version)s\n```\n',
    name: 'ASTsonnet',
    url: 'github.com/crdsonnet/astsonnet',
    usageTemplate: '\n## Usage\n\n```jsonnet\nlocal %(name)s = import "%(import)s"\n```\n',
    version: 'main',
  },
  anonymous_function+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withParams(value): {
        params: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'anonymous_function',
      },
    },
  arg+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'arg',
      },
    },
  array+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'items', type: 'array' }], help: '' } },
      new(items):
        self.withType()
        + withToStringFunction()
        + self.withItems(items),
      '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withItems(value): {
        items:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withItemsMixin(value): {
        items+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'array',
      },
    },
  assertion+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withReturnExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReturnExpr(value): {
        return_expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'assertion',
      },
    },
  assertion_expr+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'assertion', type: ['object'] }, { default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(assertion, expr):
        self.withType()
        + withToStringFunction()
        + self.withAssertion(assertion)
        + self.withExpr(expr),
      '#withAssertion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAssertion(value): {
        assertion: value,
      },
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'assertion_expr',
      },
    },
  binary+:
    {
      '#new': { 'function': { args: [{ default: null, enums: ['*', '/', '%', '+', '-', '<<', '>>', '<', '<=', '>', '>=', '==', '!=', 'in', '&', '^', '|', '&&', '||'], name: 'binaryop', type: ['object'] }, { default: null, enums: null, name: 'left_expr', type: ['object'] }, { default: null, enums: null, name: 'right_expr', type: ['object'] }], help: '' } },
      new(binaryop, left_expr, right_expr):
        self.withType()
        + withToStringFunction()
        + self.withBinaryop(binaryop)
        + self.withLeftExpr(left_expr)
        + self.withRightExpr(right_expr),
      '#withBinaryop': { 'function': { args: [{ default: null, enums: ['*', '/', '%', '+', '-', '<<', '>>', '<', '<=', '>', '>=', '==', '!=', 'in', '&', '^', '|', '&&', '||'], name: 'value', type: ['string'] }], help: '' } },
      withBinaryop(value): {
        binaryop: value,
      },
      '#withLeftExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLeftExpr(value): {
        left_expr: value,
      },
      '#withRightExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRightExpr(value): {
        right_expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'binary',
      },
    },
  binary_sum+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'exprs', type: 'array' }], help: '' } },
      new(exprs):
        self.withType()
        + withToStringFunction()
        + self.withExprs(exprs),
      '#withExprs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprs(value): {
        exprs:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withExprsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprsMixin(value): {
        exprs+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'binary_sum',
      },
    },
  bind+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'id', type: ['object'] }, { default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(id, expr):
        self.withType()
        + withToStringFunction()
        + self.withId(id)
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'bind',
      },
    },
  bind_function+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'id', type: ['object'] }, { default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(id, expr):
        self.withType()
        + withToStringFunction()
        + self.withId(id)
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withParams(value): {
        params: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'bind_function',
      },
    },
  boolean+:
    {
      '#new': { 'function': { args: [{ default: null, enums: ['true', 'false'], name: 'boolean', type: 'string' }], help: '' } },
      new(boolean):
        self.withType()
        + withToStringFunction()
        + self.withBoolean(boolean),
      '#withBoolean': { 'function': { args: [{ default: null, enums: ['true', 'false'], name: 'value', type: ['string'] }], help: '' } },
      withBoolean(value): {
        boolean: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'boolean',
      },
    },
  compspec+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'items', type: 'array' }], help: '' } },
      new(items):
        self.withType()
        + withToStringFunction()
        + self.withItems(items),
      '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withItems(value): {
        items:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withItemsMixin(value): {
        items+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'compspec',
      },
    },
  conditional+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'if_expr', type: ['object'] }, { default: null, enums: null, name: 'then_expr', type: ['object'] }], help: '' } },
      new(if_expr, then_expr):
        self.withType()
        + withToStringFunction()
        + self.withIfExpr(if_expr)
        + self.withThenExpr(then_expr),
      '#withElseExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElseExpr(value): {
        else_expr: value,
      },
      '#withIfExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIfExpr(value): {
        if_expr: value,
      },
      '#withThenExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withThenExpr(value): {
        then_expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'conditional',
      },
    },
  error_expr+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'error_expr',
      },
    },
  expr_in_super+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'expr_in_super',
      },
    },
  field+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'fieldname', type: ['string', 'string', 'string'] }, { default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(fieldname, expr):
        self.withType()
        + withToStringFunction()
        + self.withFieldname(fieldname)
        + self.withExpr(expr),
      '#withAdditive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAdditive(value=true): {
        additive: value,
      },
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withFieldname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string', 'string'] }], help: '' } },
      withFieldname(value): {
        fieldname: value,
      },
      '#withFieldnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string', 'string'] }], help: '' } },
      withFieldnameMixin(value): {
        fieldname+: value,
      },
      fieldname+:
        {
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            fieldname+: {
              id: value,
            },
          },
          '#withString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withString(value): {
            fieldname+: {
              string: value,
            },
          },
          '#withFieldnameExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFieldnameExpr(value): {
            fieldname+: {
              fieldname_expr: value,
            },
          },
        },
      '#withH': { 'function': { args: [{ default: ':', enums: null, name: 'value', type: ['string'] }], help: '' } },
      withH(value=':'): {
        h: value,
      },
      '#withHidden': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withHidden(value=true): {
        hidden: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'field',
      },
    },
  field_function+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'fieldname', type: ['string', 'string', 'string'] }, { default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(fieldname, expr):
        self.withType()
        + withToStringFunction()
        + self.withFieldname(fieldname)
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withFieldname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string', 'string'] }], help: '' } },
      withFieldname(value): {
        fieldname: value,
      },
      '#withFieldnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string', 'string'] }], help: '' } },
      withFieldnameMixin(value): {
        fieldname+: value,
      },
      fieldname+:
        {
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            fieldname+: {
              id: value,
            },
          },
          '#withString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withString(value): {
            fieldname+: {
              string: value,
            },
          },
          '#withFieldnameExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFieldnameExpr(value): {
            fieldname+: {
              fieldname_expr: value,
            },
          },
        },
      '#withH': { 'function': { args: [{ default: ':', enums: null, name: 'value', type: ['string'] }], help: '' } },
      withH(value=':'): {
        h: value,
      },
      '#withHidden': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withHidden(value=true): {
        hidden: value,
      },
      '#withParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withParams(value): {
        params: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'field_function',
      },
    },
  fieldaccess+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'exprs', type: 'array' }, { default: null, enums: null, name: 'id', type: ['object'] }], help: '' } },
      new(exprs, id):
        self.withType()
        + withToStringFunction()
        + self.withExprs(exprs)
        + self.withId(id),
      '#withExprs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprs(value): {
        exprs:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withExprsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprsMixin(value): {
        exprs+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'fieldaccess',
      },
    },
  fieldaccess_super+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'id', type: ['object'] }], help: '' } },
      new(id):
        self.withType()
        + withToStringFunction()
        + self.withId(id),
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'fieldaccess_super',
      },
    },
  fieldname_expr+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'fieldname_expr',
      },
    },
  forloop+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }, { default: null, enums: null, name: 'forspec', type: ['object'] }], help: '' } },
      new(expr, forspec):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr)
        + self.withForspec(forspec),
      '#withCompspec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCompspec(value): {
        compspec: value,
      },
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withForspec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withForspec(value): {
        forspec: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'forloop',
      },
    },
  forspec+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'id', type: ['object'] }, { default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(id, expr):
        self.withType()
        + withToStringFunction()
        + self.withId(id)
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'forspec',
      },
    },
  functioncall+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withArgs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArgs(value): {
        args:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withArgsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArgsMixin(value): {
        args+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'functioncall',
      },
    },
  id+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'id', type: 'string' }], help: '' } },
      new(id):
        self.withType()
        + withToStringFunction()
        + self.withId(id),
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'id',
      },
    },
  ifspec+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'ifspec',
      },
    },
  implicit_plus+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }, { default: null, enums: null, name: 'object', type: ['string', 'string'] }], help: '' } },
      new(expr, object):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr)
        + self.withObject(object),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withObject': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string'] }], help: '' } },
      withObject(value): {
        object: value,
      },
      '#withObjectMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string'] }], help: '' } },
      withObjectMixin(value): {
        object+: value,
      },
      object+:
        {
          '#withObject': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withObject(value): {
            object: value,
          },
          '#withObjectForloop': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withObjectForloop(value): {
            object+: {
              object_forloop: value,
            },
          },
        },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'implicit_plus',
      },
    },
  import_statement+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'path', type: 'string' }], help: '' } },
      new(path):
        self.withType()
        + withToStringFunction()
        + self.withPath(path),
      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPath(value): {
        path: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'import_statement',
      },
    },
  importbin_statement+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'path', type: 'string' }], help: '' } },
      new(path):
        self.withType()
        + withToStringFunction()
        + self.withPath(path),
      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPath(value): {
        path: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'importbin_statement',
      },
    },
  importstr_statement+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'path', type: 'string' }], help: '' } },
      new(path):
        self.withType()
        + withToStringFunction()
        + self.withPath(path),
      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPath(value): {
        path: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'importstr_statement',
      },
    },
  indexing+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }, { default: null, enums: null, name: 'exprs', type: 'array' }], help: '' } },
      new(expr, exprs):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr)
        + self.withExprs(exprs),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withExprs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprs(value): {
        exprs:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withExprsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprsMixin(value): {
        exprs+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'indexing',
      },
    },
  indexing_super+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'indexing_super',
      },
    },
  literal+:
    {
      '#new': { 'function': { args: [{ default: null, enums: ['null', 'self', '$'], name: 'literal', type: 'string' }], help: '' } },
      new(literal):
        self.withType()
        + withToStringFunction()
        + self.withLiteral(literal),
      '#withLiteral': { 'function': { args: [{ default: null, enums: ['null', 'self', '$'], name: 'value', type: ['string'] }], help: '' } },
      withLiteral(value): {
        literal: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'literal',
      },
    },
  local_bind+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'bind', type: ['object'] }, { default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(bind, expr):
        self.withType()
        + withToStringFunction()
        + self.withBind(bind)
        + self.withExpr(expr),
      '#withAdditionalBinds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAdditionalBinds(value): {
        additional_binds:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAdditionalBindsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAdditionalBindsMixin(value): {
        additional_binds+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBind': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBind(value): {
        bind: value,
      },
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'local_bind',
      },
    },
  number+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'number', type: 'string' }], help: '' } },
      new(number):
        self.withType()
        + withToStringFunction()
        + self.withNumber(number),
      '#withNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNumber(value): {
        number: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'number',
      },
    },
  object+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'members', type: 'array' }], help: '' } },
      new(members):
        self.withType()
        + withToStringFunction()
        + self.withMembers(members),
      '#withMembers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMembers(value): {
        members:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMembersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMembersMixin(value): {
        members+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'object',
      },
    },
  object_forloop+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'field', type: ['string', 'string'] }, { default: null, enums: null, name: 'forspec', type: ['object'] }], help: '' } },
      new(field, forspec):
        self.withType()
        + withToStringFunction()
        + self.withField(field)
        + self.withForspec(forspec),
      '#withCompspec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCompspec(value): {
        compspec: value,
      },
      '#withField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string'] }], help: '' } },
      withField(value): {
        field: value,
      },
      '#withFieldMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string'] }], help: '' } },
      withFieldMixin(value): {
        field+: value,
      },
      field+:
        {
          '#withField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withField(value): {
            field: value,
          },
          '#withFieldFunction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFieldFunction(value): {
            field+: {
              field_function: value,
            },
          },
        },
      '#withForspec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withForspec(value): {
        forspec: value,
      },
      '#withLeftObjectLocals': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLeftObjectLocals(value): {
        left_object_locals:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLeftObjectLocalsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLeftObjectLocalsMixin(value): {
        left_object_locals+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRightObjectLocals': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRightObjectLocals(value): {
        right_object_locals:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRightObjectLocalsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRightObjectLocalsMixin(value): {
        right_object_locals+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'object_forloop',
      },
    },
  object_local+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'bind', type: ['object'] }], help: '' } },
      new(bind):
        self.withType()
        + withToStringFunction()
        + self.withBind(bind),
      '#withBind': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBind(value): {
        bind: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'object_local',
      },
    },
  param+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'id', type: ['object'] }], help: '' } },
      new(id):
        self.withType()
        + withToStringFunction()
        + self.withId(id),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'param',
      },
    },
  params+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'params', type: 'array' }], help: '' } },
      new(params):
        self.withType()
        + withToStringFunction()
        + self.withParams(params),
      '#withParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withParams(value): {
        params:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withParamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withParamsMixin(value): {
        params+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'params',
      },
    },
  parenthesis+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'parenthesis',
      },
    },
  string+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'string', type: 'string' }], help: '' } },
      new(string):
        self.withType()
        + withToStringFunction()
        + self.withString(string),
      '#withString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withString(value): {
        string: value,
      },
      '#withTextblock': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withTextblock(value=true): {
        textblock: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'string',
      },
      '#withVerbatim': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withVerbatim(value=true): {
        verbatim: value,
      },
    },
  unary+:
    {
      '#new': { 'function': { args: [{ default: null, enums: ['-', '+', '!', '~'], name: 'unaryop', type: ['object'] }, { default: null, enums: null, name: 'expr', type: ['object'] }], help: '' } },
      new(unaryop, expr):
        self.withType()
        + withToStringFunction()
        + self.withUnaryop(unaryop)
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): {
        expr: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'unary',
      },
      '#withUnaryop': { 'function': { args: [{ default: null, enums: ['-', '+', '!', '~'], name: 'value', type: ['string'] }], help: '' } },
      withUnaryop(value): {
        unaryop: value,
      },
    },
}
