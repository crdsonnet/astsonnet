// DO NOT EDIT: generated by generator/generate.jsonnet
local astschema = import './schema.libsonnet',
      withToStringFunction() = { toString():: astschema.objectToString(self) };
{
  anonymous_function+:
    {
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withParams(value): { params: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'anonymous_function' },
    },
  arg+:
    {
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): { id: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'arg' },
    },
  array+:
    {
      new(items):
        self.withType()
        + withToStringFunction()
        + self.withItems(items),
      '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withItems(value):
        {
          items:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withItemsMixin(value):
        {
          items+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'array' },
    },
  assertion+:
    {
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withReturnExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReturnExpr(value): { return_expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'assertion' },
    },
  assertion_expr+:
    {
      new(assertion, expr):
        self.withType()
        + withToStringFunction()
        + self.withAssertion(assertion)
        + self.withExpr(expr),
      '#withAssertion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAssertion(value): { assertion: value },
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'assertion_expr' },
    },
  binary+:
    {
      new(binaryop, left_expr, right_expr):
        self.withType()
        + withToStringFunction()
        + self.withBinaryop(binaryop)
        + self.withLeftExpr(left_expr)
        + self.withRightExpr(right_expr),
      '#withBinaryop': { 'function': { args: [{ default: null, enums: ['*', '/', '%', '+', '-', '<<', '>>', '<', '<=', '>', '>=', '==', '!=', 'in', '&', '^', '|', '&&', '||'], name: 'value', type: ['string'] }], help: '' } },
      withBinaryop(value): { binaryop: value },
      '#withLeftExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLeftExpr(value): { left_expr: value },
      '#withRightExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRightExpr(value): { right_expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'binary' },
    },
  binary_sum+:
    {
      new(exprs):
        self.withType()
        + withToStringFunction()
        + self.withExprs(exprs),
      '#withExprs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprs(value):
        {
          exprs:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withExprsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprsMixin(value):
        {
          exprs+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'binary_sum' },
    },
  bind+:
    {
      new(id, expr):
        self.withType()
        + withToStringFunction()
        + self.withId(id)
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): { id: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'bind' },
    },
  bind_function+:
    {
      new(id, expr):
        self.withType()
        + withToStringFunction()
        + self.withId(id)
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): { id: value },
      '#withParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withParams(value): { params: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'bind_function' },
    },
  compspec+:
    {
      new(items):
        self.withType()
        + withToStringFunction()
        + self.withItems(items),
      '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withItems(value):
        {
          items:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withItemsMixin(value):
        {
          items+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'compspec' },
    },
  conditional+:
    {
      new(if_expr, then_expr):
        self.withType()
        + withToStringFunction()
        + self.withIfExpr(if_expr)
        + self.withThenExpr(then_expr),
      '#withElseExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElseExpr(value): { else_expr: value },
      '#withIfExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIfExpr(value): { if_expr: value },
      '#withThenExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withThenExpr(value): { then_expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'conditional' },
    },
  error_expr+:
    {
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'error_expr' },
    },
  expr_in_super+:
    {
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'expr_in_super' },
    },
  field+:
    {
      new(fieldname, expr):
        self.withType()
        + withToStringFunction()
        + self.withFieldname(fieldname)
        + self.withExpr(expr),
      '#withAdditive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAdditive(value=true): { additive: value },
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withFieldname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string', 'string'] }], help: '' } },
      withFieldname(value): { fieldname: value },
      '#withFieldnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string', 'string'] }], help: '' } },
      withFieldnameMixin(value): { fieldname+: value },
      fieldname+:
        {
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): { fieldname+: { id: value } },
          '#withString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withString(value): { fieldname+: { string: value } },
          '#withFieldnameExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFieldnameExpr(value): { fieldname+: { fieldname_expr: value } },
        },
      '#withHidden': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withHidden(value=true): { hidden: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'field' },
    },
  field_function+:
    {
      new(fieldname, expr):
        self.withType()
        + withToStringFunction()
        + self.withFieldname(fieldname)
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withFieldname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string', 'string'] }], help: '' } },
      withFieldname(value): { fieldname: value },
      '#withFieldnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string', 'string'] }], help: '' } },
      withFieldnameMixin(value): { fieldname+: value },
      fieldname+:
        {
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): { fieldname+: { id: value } },
          '#withString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withString(value): { fieldname+: { string: value } },
          '#withFieldnameExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFieldnameExpr(value): { fieldname+: { fieldname_expr: value } },
        },
      '#withHidden': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withHidden(value=true): { hidden: value },
      '#withParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withParams(value): { params: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'field_function' },
    },
  fieldaccess+:
    {
      new(exprs, id):
        self.withType()
        + withToStringFunction()
        + self.withExprs(exprs)
        + self.withId(id),
      '#withExprs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprs(value):
        {
          exprs:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withExprsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprsMixin(value):
        {
          exprs+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): { id: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'fieldaccess' },
    },
  fieldaccess_super+:
    {
      new(id):
        self.withType()
        + withToStringFunction()
        + self.withId(id),
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): { id: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'fieldaccess_super' },
    },
  fieldname_expr+:
    {
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'fieldname_expr' },
    },
  forloop+:
    {
      new(expr, forspec):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr)
        + self.withForspec(forspec),
      '#withCompspec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCompspec(value): { compspec: value },
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withForspec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withForspec(value): { forspec: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'forloop' },
    },
  forspec+:
    {
      new(id, expr):
        self.withType()
        + withToStringFunction()
        + self.withId(id)
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): { id: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'forspec' },
    },
  functioncall+:
    {
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withArgs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArgs(value):
        {
          args:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withArgsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArgsMixin(value):
        {
          args+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'functioncall' },
    },
  id+:
    {
      new(id):
        self.withType()
        + withToStringFunction()
        + self.withId(id),
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): { id: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'id' },
    },
  ifspec+:
    {
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'ifspec' },
    },
  import_statement+:
    {
      new(path):
        self.withType()
        + withToStringFunction()
        + self.withPath(path),
      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPath(value): { path: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'import_statement' },
    },
  importbin_statement+:
    {
      new(path):
        self.withType()
        + withToStringFunction()
        + self.withPath(path),
      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPath(value): { path: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'importbin_statement' },
    },
  importstr_statement+:
    {
      new(path):
        self.withType()
        + withToStringFunction()
        + self.withPath(path),
      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPath(value): { path: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'importstr_statement' },
    },
  indexing+:
    {
      new(expr, exprs):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr)
        + self.withExprs(exprs),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withExprs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprs(value):
        {
          exprs:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withExprsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExprsMixin(value):
        {
          exprs+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'indexing' },
    },
  indexing_super+:
    {
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'indexing_super' },
    },
  literal+:
    {
      new(literal):
        self.withType()
        + withToStringFunction()
        + self.withLiteral(literal),
      '#withLiteral': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number', 'integer', 'boolean', 'null', 'string'] }], help: '' } },
      withLiteral(value): { literal: value },
      '#withLiteralMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number', 'integer', 'boolean', 'null', 'string'] }], help: '' } },
      withLiteralMixin(value): { literal+: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'literal' },
    },
  local_bind+:
    {
      new(bind, expr):
        self.withType()
        + withToStringFunction()
        + self.withBind(bind)
        + self.withExpr(expr),
      '#withAdditionalBinds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAdditionalBinds(value):
        {
          additional_binds:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withAdditionalBindsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAdditionalBindsMixin(value):
        {
          additional_binds+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withBind': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBind(value): { bind: value },
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'local_bind' },
    },
  object+:
    {
      new(members):
        self.withType()
        + withToStringFunction()
        + self.withMembers(members),
      '#withMembers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMembers(value):
        {
          members:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withMembersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMembersMixin(value):
        {
          members+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'object' },
    },
  object_forloop+:
    {
      new(fieldname_expr, expr, forspec):
        self.withType()
        + withToStringFunction()
        + self.withFieldnameExpr(fieldname_expr)
        + self.withExpr(expr)
        + self.withForspec(forspec),
      '#withCompspec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCompspec(value): { compspec: value },
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withFieldnameExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFieldnameExpr(value): { fieldname_expr: value },
      '#withForspec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withForspec(value): { forspec: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'object_forloop' },
    },
  object_local+:
    {
      new(bind):
        self.withType()
        + withToStringFunction()
        + self.withBind(bind),
      '#withBind': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBind(value): { bind: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'object_local' },
    },
  param+:
    {
      new(id):
        self.withType()
        + withToStringFunction()
        + self.withId(id),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): { id: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'param' },
    },
  params+:
    {
      new(params):
        self.withType()
        + withToStringFunction()
        + self.withParams(params),
      '#withParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withParams(value):
        {
          params:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withParamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withParamsMixin(value):
        {
          params+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'params' },
    },
  parenthesis+:
    {
      new(expr):
        self.withType()
        + withToStringFunction()
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'parenthesis' },
    },
  string+:
    {
      new(string):
        self.withType()
        + withToStringFunction()
        + self.withString(string),
      '#withString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withString(value): { string: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'string' },
    },
  unary+:
    {
      new(unaryop, expr):
        self.withType()
        + withToStringFunction()
        + self.withUnaryop(unaryop)
        + self.withExpr(expr),
      '#withExpr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpr(value): { expr: value },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): { type: 'unary' },
      '#withUnaryop': { 'function': { args: [{ default: null, enums: ['-', '+', '!', '~'], name: 'value', type: ['string'] }], help: '' } },
      withUnaryop(value): { unaryop: value },
    },
}
